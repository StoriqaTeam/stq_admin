kind: pipeline
type: kubernetes
name: default

platform:
  os: linux
  arch: arm64

clone:
  depth: 50

steps:
# restore s3 cache
- name: restore-cache
  image: plugins/s3-cache:1
  settings:
    pull: true
    access_key: aws_access_key_id
    secret_key: aws_secret_access_key
    restore: true
    mount:
      - deps
  when:
    event:
    - pull_request
    - push
    - tag

# fetch  git sub-modules
- name: submodules
  image: alpine/git
  commands:
  - git submodule init
  - git submodule update --recursive --remote

# Test PR
- name: test
  image: rust:1.45-stretch
  environment:
    RUN_MODE: k8s
    DATABASE_HOST: db-postgresql
    DATABASE_URL: postgresql://users:users@db-postgresql/users
    RUST_BACKTRACE: '1'
    CARGO_HOME: deps
    PGPASSWORD: a1a1a1a1
  commands:
  - rustup component add rustfmt-preview
  - cargo fmt -- --check
  - apt-get update && apt-get install -y ca-certificates wget gnupg2
  - update-ca-certificates
  - wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | apt-key add -
  - echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" >> /etc/apt/sources.list.d/pgdg.list
  - apt-get update && apt-get install -y libpq5 postgresql-client-10
  - psql -U postgres -h db-postgresql -c "CREATE ROLE users WITH PASSWORD 'users' LOGIN REPLICATION" -c "CREATE DATABASE users OWNER users"
  - psql -U postgres -h db-postgresql -d users -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"";
  - mkdir -p /usr/local/cargo/bin || true
  - wget -q https://s3.eu-central-1.amazonaws.com/dumpster.stq/diesel -O /usr/local/cargo/bin/diesel
  - chmod +x /usr/local/cargo/bin/diesel
  - diesel migration run
  - cargo test
  when:
    event:
    - pull_request

# Build debug
- name: build-debug
  image: rust:1.45-stretch
  environment:
    CARGO_HOME: deps
    RUSTFLAGS: -C opt-level=1 -C debuginfo=0
  commands:
  - apt-get update && apt-get install -y clang
  - cargo build --locked
  - mkdir migrations || true
  when:
    event: 
      - push
    branch: 
      - master
      
# Build release
- name: build-release
  image: rust:1.45-stretch
  environment:
    CARGO_HOME: deps
  commands:
  - apt-get update && apt-get install -y clang
  - cargo build --release --locked
  - mkdir migrations || true
  when:
    event: 
    - tag

# publish debug image in gce registry
- name: publish-debug
  image: plugins/gcr
  settings:
    project: sansar-299400
    registry: gcr.io
    repo: sansar-299400/stq-users
    tags:
      - ${DRONE_BRANCH//\//_}
      - ${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    json_key:
      from_secret: GOOGLE_CREDENTIALS
  when:
    event: 
      - push
    branch: 
      - master

# publish release image in gce registry
- name: publish-release
  image: plugins/gcr
  settings:
    project: sansar-299400
    registry: gcr.io
    repo: sansar-299400/stq-users
    build_args:
    - env=release
    tag:
    - '${DRONE_TAG}'
    - latest
    json_key:
      from_secret: GOOGLE_CREDENTIALS
  when:
    event: 
    - tag

# # docker debug image in docker registry
# - name: package-debug
#   image: plugins/docker
#   settings:
#     repo: sansare/stq-users
#     tag:
#     - ${DRONE_BRANCH//\//_}
#     - ${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
#     username: shivkushwaha
#     password: password@28727
#   when:
#     branch: 
#       - master
#     event:
#       - push

# # docker release image in docker registry
# - name: package-release
#   image: plugins/docker
#   settings:
#     repo: sansare/stq-users
#     build_args:
#     - env=release
#     tag:
#     - '${DRONE_TAG}'
#     - latest
#     username: shivkushwaha
#     password: password@28727

# # deploy nightly
# - name: deploy-nightly
#   image: sansare/drone_k8s_rollout
#   environment:
#     namespace: default
#     kind: deployment
#     object: users
#     img_names: sansare/stq-users
#     img_tags: ${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
#     img_cnts: users
#   settings:
#     k8s_ca:
#       from_secret: k8s_nightly_ca
#     k8s_user:
#       from_secret: k8s_nightly_user
#     k8s_token:
#       from_secret: k8s_nightly_token
#     k8s_addr:
#       from_secret: k8s_nightly_addr
#   when:
#     branch:
#     - master
#     event:
#     - push

# # deploy staging
# - name: deploy-stage
#   image: sansare/drone_k8s_rollout
#   environment:
#     namespace: default
#     kind: deployment
#     object: users
#     img_names: sansare/stq-users
#     img_tags: '${DRONE_TAG}'
#     img_cnts: users
#   settings:
#     k8s_ca:
#       from_secret: k8s_stage_ca
#     k8s_user:
#       from_secret: k8s_stage_user
#     k8s_token:
#       from_secret: k8s_stage_token
#     k8s_addr:
#       from_secret: k8s_stage_addr
#   when:
#     event:
#     - tag

# # deploy stable
# - name: deploy-stable
#   image: sansare/drone_k8s_rollout
#   environment:
#     namespace: default
#     kind: deployment
#     object: users
#     img_names: sansare/stq-users
#     img_tags: ${DRONE_BRANCH//\//_}${DRONE_PARENT_BUILD_NUMBER}
#     img_cnts: users
#   settings:
#     k8s_ca:
#       from_secret: k8s_stable_ca
#     k8s_user:
#       from_secret: k8s_stable_user
#     k8s_token:
#       from_secret: k8s_stable_token
#     k8s_addr:
#       from_secret: k8s_stable_addr
#   when:
#     event:
#     - deployment
#     environment:
#     - stable

# # deploy production
# - name: deploy-production
#   image: sansare/drone_k8s_rollout
#   environment:
#     namespace: default
#     kind: deployment
#     object: users
#     img_names: sansare/stq-users
#     img_tags: '${DRONE_TAG}'
#     img_cnts: users
#   settings:
#     k8s_ca:
#       from_secret: k8s_prod_ca
#     k8s_user:
#       from_secret: k8s_prod_user
#     k8s_token:
#       from_secret: k8s_prod_token
#     k8s_addr:
#       from_secret: k8s_prod_addr
#   when:
#     event:
#     - deployment
#     environment:
#     - production


# deploy-nightly
- name: deploy-nightly
  image: nytimes/drone-gke
  environment:
    TOKEN:
      from_secret: GOOGLE_CREDENTIALS
  settings:
    cluster: sansar-cluster
    expand_env_vars: true
    template: k8s/k8s.yaml
    namespace: default
    skip_secret_template: true
    zone: us-east1-c
    vars:
      app: users
      stack: storiqa
      db_url: postgresql://users:users@users-pg/users
      rust_log: users=debug
      image: gcr.io/sansar-299400/stq-users:${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
  when:
    branch:
    - master
    event:
    - push

# deploy stage
- name: deploy-stage
  image: nytimes/drone-gke
  environment:
    TOKEN:
      from_secret: GOOGLE_CREDENTIALS
  settings:
    cluster: sansar-cluster
    expand_env_vars: true
    template: k8s/app.yaml
    namespace: default
    skip_secret_template: true
    zone: us-east1-c
    vars:
      app: users
      stack: storiqa
      db_url: postgresql://users:users@users-pg/users
      rust_log: users=debug
      image: gcr.io/sansar-299400/stq-users:'${DRONE_TAG}'
  when:
    event:
    - tag

# deploy stable
- name: deploy-stable
  image: nytimes/drone-gke
  environment:
    TOKEN:
      from_secret: GOOGLE_CREDENTIALS
  settings:
    cluster: sansar-cluster
    expand_env_vars: true
    template: k8s/app.yaml
    namespace: default
    skip_secret_template: true
    zone: us-east1-c
    vars:
      app: users
      stack: storiqa
      db_url: postgresql://users:users@users-pg/users
      rust_log: users=debug
      image: gcr.io/sansar-299400/stq-users:${DRONE_BRANCH//\//_}${DRONE_PARENT_BUILD_NUMBER}
  when:
    target:
    - stable

# deploy production
- name: deploy-production
  image: nytimes/drone-gke
  environment:
    TOKEN:
      from_secret: GOOGLE_CREDENTIALS
  settings:
    cluster: sansar-cluster
    expand_env_vars: true
    template: k8s/app.yaml
    namespace: default
    skip_secret_template: true
    zone: us-east1-c
    vars:
      app: users
      stack: storiqa
      db_url: postgresql://users:users@users-pg/users
      rust_log: users=debug
      image: gcr.io/sansar-299400/stq-users:'${DRONE_TAG}'
  when:
    target:
    - production

# rebuild cache
# - name: rebuild-cache
#   image: plugins/s3-cache:1
#   settings:
#     pull: true
#     access_key: aws_access_key_id
#     secret_key: aws_secret_access_key
#     rebuild: true
#     mount:
#       - deps
#   when:
#     branch:
#     - master
#     event:
#     - push

# Test services
- name: db-postgresql
  image: postgres:10-alpine
  environment:
    POSTGRES_PASSWORD: a1a1a1a1
  when:
    event:
    - pull_request